// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @unique @default(uuid())
  phoneNumber String  @unique
  name        String?
  address     String?
  orders      Order[] @relation("UserOrders")
  carts       Cart[]  @relation("UserCarts")
}

model Category {
  id            String    @id @unique @default(uuid())
  categoryName  String
  categoryImage String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]


}

model Product {
  id          String   @id @unique @default(uuid())
  productName String
  categoryId  String
  pricing     Json // Store pricing as JSON (e.g., {"distributor": 323, "dealer": 432})
  image       String?
  stockStatus Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  orders   Order[]  @relation("ProductOrders")
  carts    Cart[]   @relation("ProductCarts")
}

model Order {
  id             String    @id @unique @default(uuid())
  customerId     String // Assuming this is a User ID referencing the User model
  productId      String // Product being ordered
  orderDate      DateTime  @default(now())
  quantity       Int?
  pricing        Float?
  amount         Float?
  deliveryStatus String    @default("Pending")
  deliveryDate   DateTime?
  paymentStatus  String    @default("Pending")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  customer User    @relation("UserOrders", fields: [customerId], references: [id])
  product  Product @relation("ProductOrders", fields: [productId], references: [id])
}

model Cart {
  id          String   @id @default(uuid()) @unique
  customerId  String   // Reference to the User model
  productId   String   // Reference to the Product model
  quantity    Int      @default(1) // The quantity of the product
  productImage String 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation("ProductCarts", fields: [productId], references: [id])
  customer    User     @relation("UserCarts", fields: [customerId], references: [id])
  
  @@unique([customerId, productId])


}